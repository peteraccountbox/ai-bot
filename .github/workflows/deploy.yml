name: Deploy to EC2

on:
  push:
    branches: [ deploy ]

env:
  IMAGE_NAME: ai-bot
  EC2_HOST: ec2-52-37-221-188.us-west-2.compute.amazonaws.com
  EC2_USER: ubuntu

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" | sed 's/\\n/\n/g' > ~/.ssh/ec2.pem
        chmod 600 ~/.ssh/ec2.pem
        ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Create deployment package
      run: |
        # Create a minimal deployment package
        mkdir deploy
        cp Dockerfile requirements.txt main.py deploy/
        cp -r app/ deploy/
        tar -czf deploy.tar.gz -C deploy .

    - name: Copy files to EC2
      run: |
        scp -i ~/.ssh/ec2.pem deploy.tar.gz ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:~/deploy.tar.gz

    - name: Deploy on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          # Clean up old deployment
          rm -rf ~/app
          mkdir -p ~/app
          
          # Extract new files
          tar -xzf deploy.tar.gz -C ~/app
          cd ~/app
          
          # Stop and remove existing container
          docker ps -q --filter "name=${{ env.IMAGE_NAME }}" | xargs -r docker stop
          docker ps -aq --filter "name=${{ env.IMAGE_NAME }}" | xargs -r docker rm
          
          # Build and run new container
          docker build -t ${{ env.IMAGE_NAME }} .
          docker run -d \
            --name ${{ env.IMAGE_NAME }} \
            -p 8181:8181 \
            -e OPENAI_API_KEY='${{ secrets.OPENAI_API_KEY }}' \
            ${{ env.IMAGE_NAME }}
          
          # Clean up
          rm ~/deploy.tar.gz