name: Deploy to EC2

on:
  push:
    branches: [ deploy ]

env:
  IMAGE_NAME: ai-bot
  EC2_HOST: ec2-52-37-221-188.us-west-2.compute.amazonaws.com
  EC2_USER: ubuntu

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" | sed 's/\\n/\n/g' > ~/.ssh/ec2.pem
        chmod 600 ~/.ssh/ec2.pem
        ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Create deployment package
      run: |
        # List files before packaging (for debugging)
        echo "Current directory contents:"
        ls -la
        
        # Create requirements.txt if it doesn't exist
        if [ ! -f requirements.txt ]; then
          echo "Creating requirements.txt"
          echo "fastapi" > requirements.txt
          echo "uvicorn" >> requirements.txt
          echo "openai" >> requirements.txt
          echo "python-dotenv" >> requirements.txt
        fi
        
        # Create a minimal deployment package
        mkdir deploy
        cp Dockerfile docker-compose.yml deploy/
        cp requirements.txt deploy/
        cp main.py deploy/ || echo "Warning: main.py not found"
        cp -r app/ deploy/ || echo "Warning: app/ directory not found"
        
        # List deployment package contents (for debugging)
        echo "Deployment package contents:"
        ls -la deploy/
        
        tar -czf deploy.tar.gz -C deploy .

    - name: Copy files to EC2
      run: |
        scp -i ~/.ssh/ec2.pem deploy.tar.gz ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:~/deploy.tar.gz

    - name: Deploy on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          # Clean up old deployment
          rm -rf ~/app
          mkdir -p ~/app
          
          # Extract new files
          tar -xzf deploy.tar.gz -C ~/app
          cd ~/app
          
          # List extracted files (for debugging)
          echo "Extracted files:"
          ls -la
          
          # Set environment variable
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
          
          # Stop existing containers and remove old images
          docker-compose down
          docker system prune -f
          
          # Build and start new containers
          docker-compose up -d --build
          
          # Wait for container to start and show logs
          sleep 10
          echo "Container Status:"
          docker ps
          echo "Container Logs:"
          docker-compose logs
          
          # Clean up
          rm ~/deploy.tar.gz