name: Deploy to EC2

on:
  push:
    branches: [ deploy ]

env:
  IMAGE_NAME: ai-bot
  EC2_HOST: ec2-52-37-221-188.us-west-2.compute.amazonaws.com
  EC2_USER: ubuntu

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Build Docker image using docker-compose
      run: |
        # Create .env file for build
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
        
        # Build the image
        docker-compose build
        
        # Save the image
        docker save ai-bot-app > image.tar
        gzip image.tar
        
        # Show image size
        echo "Image size:"
        ls -lh image.tar.gz

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" | sed 's/\\n/\n/g' > ~/.ssh/ec2.pem
        chmod 600 ~/.ssh/ec2.pem
        ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Split and Copy Docker image to EC2
      run: |
        # Split the file into 100MB chunks
        split -b 100m image.tar.gz "image.part"
        
        # Copy each part to EC2
        for file in image.part*; do
          echo "Copying $file..."
          scp -i ~/.ssh/ec2.pem "$file" ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:~/"$file"
        done
        
        # Copy config files
        scp -i ~/.ssh/ec2.pem docker-compose.yml ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:~/app/docker-compose.yml
        scp -i ~/.ssh/ec2.pem .env ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:~/app/.env

    - name: Deploy on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          # Cleanup and prepare directory
          mkdir -p ~/app
          cd ~/app
          
          # Load the Docker image
          gunzip -f ~/image.tar.gz
          docker load < ~/image.tar
          
          # Stop any existing containers
          docker-compose down || true
          
          # Pull any additional images if needed
          docker-compose pull
          
          # Start the containers in detached mode
          docker-compose up -d
          
          # Wait a moment for containers to start
          sleep 10
          
          # Show container status and logs
          echo "Container Status:"
          docker-compose ps
          echo "Container Logs:"
          docker-compose logs --tail=50