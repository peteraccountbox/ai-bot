name: Deploy to EC2

on:
  push:
    branches: [ deploy ]

env:
  IMAGE_NAME: ai-bot
  EC2_HOST: ec2-52-37-221-188.us-west-2.compute.amazonaws.com
  EC2_USER: ubuntu
  CHROMA_PERSISTANCE_PATH: ~/
  CHROMA_SERVER_HOST: http://52.37.221.188
  CHROMA_SERVER_HTTP_PORT: 8000
  # Redis
  REDIS_HOST: redis-13571.c238.us-central1-2.gce.redns.redis-cloud.com
  REDIS_PORT: 13571
  REDIS_USERNAME: default
  REDIS_PASSWORD: QzOWoUleui8jA2AKCdPjCYEXniqosWmX

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Build Docker image using docker-compose
      run: |
        # Create .env file for build
       echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
        
        # Build the image
        docker-compose build
        
        # Save the image
        docker save ai-bot > image.tar
        gzip image.tar
        
        # Show image size
        echo "Image size:"
        ls -lh image.tar.gz

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" | sed 's/\\n/\n/g' > ~/.ssh/ec2.pem
        chmod 600 ~/.ssh/ec2.pem
        ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Save and split Docker image
      run: |
        docker save ${{ env.IMAGE_NAME }}:latest | gzip > image.tar.gz
        mkdir -p splits
        # Increased split size to 20M for fewer splits
        split -b 20M image.tar.gz splits/image_
        # Show split files for verification
        ls -lh splits/
        
    - name: Upload splits in parallel
      run: |
        cd splits
        # Upload splits in parallel using background processes
        for file in image_*; do
          scp -o StrictHostKeyChecking=no -i ${{ secrets.EC2_KEY }} $file ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:~/app/splits/ &
        done
        # Wait for all background uploads to complete
        wait
        
    - name: Deploy on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          cd ~/app
          
          # Reassemble image in parallel with cleanup
          {
            echo 'Reassembling image file...'
            cat splits/image_* > image.tar.gz &
            
            # Cleanup old splits in background
            rm -rf splits/* &
          } wait
          
          # Ensure .env file exists and has correct permissions
          touch .env
          chmod 600 .env
          
          # Write environment variables to .env
          cat > .env << 'EOL'
          OPENAI_API_KEY=${OPENAI_API_KEY}
          CHROMA_PERSISTANCE_PATH=${CHROMA_PERSISTANCE_PATH}
          CHROMA_SERVER_HOST=${CHROMA_SERVER_HOST}
          CHROMA_SERVER_HTTP_PORT=${CHROMA_SERVER_HTTP_PORT}
          REDIS_HOST=${REDIS_HOST}
          REDIS_PORT=${REDIS_PORT}
          REDIS_USERNAME=${REDIS_USERNAME}
          REDIS_PASSWORD=${REDIS_PASSWORD}
          EOL
          
          # Load the Docker image
          gunzip -f image.tar.gz
          docker load < image.tar
          
          # Stop the existing container if running
          if [ "$(docker ps -q -f name=ai-bot-container)" ]; then
            docker stop ai-bot-container
            docker rm ai-bot-container
          fi
          
          # Remove old images but keep the running ones
          docker images ai-bot -q | xargs -r docker rmi
          
          # Start the container with docker-compose
          docker-compose pull || true
          docker-compose up -d --remove-orphans
          
          # Clean up
          docker system prune -f
          
          # Show logs
          docker-compose logs --tail=50