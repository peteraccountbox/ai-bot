name: Build and Deploy to EC2

on:
  push:
    branches:
      - multi_type_support

env:
  EC2_HOST: ec2-52-37-221-188.us-west-2.compute.amazonaws.com
  EC2_USER: ubuntu
  EC2_KEY: ${{ secrets.EC2_KEY }}
  EC2_DIR: ~/ai-bot/
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Build Docker images using docker-compose
      run: |
        # Pull Chroma image first
        docker pull ghcr.io/chroma-core/chroma:latest
        
        # Build the images with platform specification
        DOCKER_BUILDKIT=1 docker-compose build --build-arg BUILDPLATFORM=linux/amd64 --build-arg TARGETPLATFORM=linux/amd64
        # List images to verify they were built
        docker images
        # Get the actual image names from docker-compose
        APP_IMAGE=$(docker-compose config | grep 'image:' | head -n1 | awk '{print $2}')
        # Tag images with platform-specific suffix
        docker tag $APP_IMAGE ${APP_IMAGE}-amd64

    - name: Save and compress Docker images
      run: |
        # Get app image name from docker-compose
        APP_IMAGE=$(docker-compose config | grep 'image:' | head -n1 | awk '{print $2}')
        # Save and compress only the app image
        echo "Saving and compressing app image..."
        docker save $APP_IMAGE | gzip > app.tar.gz
        # Show file sizes
        ls -lh *.tar.gz

    - name: Setup SSH key
      run: |
        # Create .ssh directory
        mkdir -p ~/.ssh
        # Write the private key to a file
        echo "${{ secrets.EC2_KEY }}" > ~/.ssh/ec2_key.pem
        # Set correct permissions
        chmod 600 ~/.ssh/ec2_key.pem
        # Debug: Check if file exists and has correct permissions
        ls -la ~/.ssh/ec2_key.pem

    - name: Setup Docker permissions on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem ${EC2_USER}@${EC2_HOST} "
          echo 'Setting up Docker permissions...'
          sudo usermod -aG docker $USER
          sudo chmod 666 /var/run/docker.sock
          docker ps
        "

    - name: Load and start containers
      run: |
        # Install required tools
        sudo apt-get update && sudo apt-get install -y pv parallel

        # Create directory for split files
        mkdir splits

        # Split only app.tar.gz into chunks
        echo "Splitting files into chunks..."
        split -b 50M app.tar.gz splits/app_

        # Create remote directory for splits
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem ${EC2_USER}@${EC2_HOST} "mkdir -p ${EC2_DIR}/splits"

        # Transfer splits in parallel (8 concurrent transfers)
        echo "Transferring splits in parallel..."
        ls splits/* | parallel -j 8 scp -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem {} ${EC2_USER}@${EC2_HOST}:${EC2_DIR}/splits/

        # Reassemble and load images on EC2
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem ${EC2_USER}@${EC2_HOST} "
          cd ${EC2_DIR}
          
          echo 'Reassembling files...'
          cat splits/app_* > app.tar.gz
          
          echo 'Stopping and removing all containers...'
          sudo docker-compose down -v
          
          echo 'Removing all related images...'
          sudo docker-compose rm -f
          sudo docker image prune -af
          
          echo 'Pulling fresh Chroma image...'
          sudo docker pull ghcr.io/chroma-core/chroma:latest
          
          echo 'Loading app image...'
          sudo docker load < app.tar.gz
          
          echo 'Starting containers fresh...'
          sudo docker-compose up -d
          
          echo 'Checking container status...'
          sudo docker ps
        "